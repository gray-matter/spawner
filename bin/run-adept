#! /usr/bin/env ruby

# FIXME
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")

require 'drb'
require 'optparse'
require 'thread'
require 'spawner'

HUGE_TIMEOUT_TO_AVOID_DEADLOCK = 42424242

$stdout.sync = true
$stderr.sync = true

persistent = false

options_parser = OptionParser.new()

options_parser.banner = "Usage: #$0 [options] command"
options_parser.on_head('-h', '--help', 'Print this usage') do
  puts options_parser
  exit 1
end

options_parser.on('-p', '--persistent', 'Whether this script shall exit after running the first duty or not') do
  persistent = true
end

options_parser.parse!()

if (ARGV.size() != 1)
  $stderr.puts options_parser
  exit 1
end

worker_thread = nil
duty_container_drb_uri = ARGV[0]
duty_container = nil
duty_container_mutex = Mutex.new()
duty_container_cond = ConditionVariable.new()
duty = nil

begin
  # Retrieve the object shared by the remote server
  duty_container = DRbObject.new(nil, duty_container_drb_uri)
rescue
  $stderr.puts "Error: unable to connect to the conductor"
  exit 1
end

Signal.trap('CONT') do
  duty_container_mutex.synchronize() do
    duty_container_cond.signal()
  end
end

Signal.trap('TERM') do
  # FIXME: notify something/do something w/ the current duty
  Thread.kill(worker_thread)
end

worker_thread = Thread.new() do
  if !duty_container.nil?()
    adept = Spawner::Adept.new()

    duty_container_mutex.synchronize() do
      begin
        duty = duty_container.get_duty()

        adept.give_duty(duty)

        # This is the single most important line of this whole script. If
        # there's nothing to do, release the mutex and wait patiently for
        # someone to wake us up.
        duty_container_cond.wait(duty_container_mutex) if persistent
      end while persistent
    end
  end
end

# Hack: if we don't specify a timeout, join will throw a "deadlock detected"
# exception when the worker thread hits the waiting part, thinking that
# we're waiting for something that will never happen, even though a "CONT"
# signal might (and should) wake it up.
worker_thread.join(HUGE_TIMEOUT_TO_AVOID_DEADLOCK)
