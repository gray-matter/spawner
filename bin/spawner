#! /usr/bin/env ruby

# FIXME: remove this
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")

require 'etc'
require 'drb'
require 'tmpdir'
require 'spawner'

DEFAULT_CONFIG_FILE_PATH = "#{File.dirname(__FILE__)}/../etc/config.yml"
URI_FILE_PATH_PATTERN = 'spawner-info-' + Etc.getlogin() + '-'

def get_conductor_uri_file_path()
  pattern = File.expand_path(URI_FILE_PATH_PATTERN + "*", Dir.tmpdir)
  matches = Dir.glob(pattern)

  return nil if matches.empty?()

  if matches.size() > 1
    raise "#{matches.size()} matches for the pattern '#{pattern}', don't know which one to choose..."
  end

  return matches[0]
end

def get_conductor_uri()
  info_file_path = get_conductor_uri_file_path()

  if info_file_path.nil?()
    raise "Could not locate any information file: make sure " +
      "that the spawner service is running"
  end

  pid, uri = IO.readlines(info_file_path)

  return uri
end

# Store the conductor URI in an hopefully unique file.
# Throw an exception if the storage failed or the file already exists (meaning
# the process already exists or was not killed properly).
def store_conductor_uri(uri)
  old_file_path = get_conductor_uri_file_path()

  # The info file already exists
  if !old_file_path.nil?()
    $stderr.puts "Warning: an information file already exists (#{old_file_path})"

    old_pid, old_uri = IO.readlines(old_file_path)
    old_pid.strip!()
    old_uri.strip!()

    if pid.nil?() || uri.nil?()
      $stderr.puts "Warning: badly formatted information file (#{old_file_path})"
      return
    end

    # Check that the referenced process exists
    begin
      Process.kill(0, Integer(pid))
    rescue Errno::ESRCH
      # The process is dead, so nevermind
      File.unlink(old_file_path)
    else
      raise "The spawner is already running (PID #{pid}), you cannot run more than one spawner per user"
    end
  end

  Dir::Tmpname.create(URI_FILE_PATH_PATTERN) do |path|
    f = File.new(path, "w")
    f.puts($$)
    f.puts(uri)
    f.close()

    return path
  end
end

# Get the remote conductor object
def get_conductor()
  conductor_uri = nil
  conductor = nil

  begin
    conductor_uri = get_conductor_uri()
  rescue Exception => ex
    $stderr.puts "Error: unable to bind on the spawner: #{ex}"
    exit 4
  end

  begin
    conductor = DRbObject.new(nil, conductor_uri)
  rescue Exception => ex
  end

  if conductor.nil?()
    $stderr.puts "Error: unable to bind on '#{conductor_uri}': " +
      (ex.nil?() ? '' : ex.to_s())
    exit 4
  end

  return conductor
end

def start_callback(config_file_path)
  begin
    Process.daemon(true, true)
  rescue Exception => exc
    $stderr.puts "Error: unable to daemonize the process: '#{exc}'"
    exit 2
  end

  puts "Starting spawner..."

  config_file_path ||= DEFAULT_CONFIG_FILE_PATH

  cdtor = Spawner::Conductor.new()

  begin
    cdtor.load_config_from_file(config_file_path)
  rescue Exception => e
    $stderr.puts "Error: Unable to load the configuration from '#{config_file_path}': #{e}"
    exit 2
  end

  begin
    DRb.start_service(nil, cdtor)
  rescue Exception => exc
    $stderr.puts "Error: unable to start the remote spawner: '#{exc}'"
    exit 2
  end

  conductor_uri = DRb.uri()
  puts conductor_uri

  puts "Spawner started"

  begin
    uri_file_path = store_conductor_uri(conductor_uri)
  rescue Exception => exc
    $stderr.puts "Error: unable to store the remote spawner URI: #{exc}"
    exit 2
  end

  begin
    cdtor.wait()
  ensure
    File.unlink(uri_file_path)
  end
end

def stop_callback(config_file_path)
  puts "Stopping the spawner..."
  cdtor = get_conductor()
  cdtor.stop()
  puts "Spawner stopped"
end

def restart_callback(config_file_path)
  config_file_path ||= DEFAULT_CONFIG_FILE_PATH
  stop_callback(config_file_path)
  start_callback(config_file_path)
end

def reload_callback(config_file_path)
  # If config_file_path is nil, this will reload the file given at start time
  cdtor = get_conductor()
  cdtor.reload_config(config_file_path)
end

AVAILABLE_ACTIONS = {
  'start' => method(:start_callback),
  'stop' => method(:stop_callback),
  'restart' => method(:restart_callback),
  'reload' => method(:reload_callback),
  'status' => method(:reload_callback)
}

def usage()
  $stderr.puts "Usage: #$0 #{AVAILABLE_ACTIONS.keys().join('/')} [configuration_file_path]"
  $stderr.puts "The configuration_file_path argument is optional (defaults to '#{DEFAULT_CONFIG_FILE_PATH}')"
  exit 1
end

usage() if ARGV.size() < 1 || !AVAILABLE_ACTIONS.has_key?(ARGV[0])

command = ARGV[0]
config_file_path = ARGV.size() > 1 ? ARGV[1] : nil

AVAILABLE_ACTIONS[command].call(config_file_path)
